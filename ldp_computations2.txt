import akdot_nr_ldp_v1 as ldp
import numpy as np

usft = 3937 / 1200

# compute the elevation factor
#Rg     = lcc.geMeRaCu(phi, a, inFl) # geometric mean radius of curvature, in meters
#EF     = Rg/(Rg + h) # Elevation Factor

#test_PhiO = ldp.min2Dec(32,15,00)
#test_LamO = ldp.min2Dec(-111,24,00)
#test_kO   = 1.000110
#test_Skew = 45

#test1   = ldp.PCCS_1E(phi,lam) 

#FbkLDP = ldp.Fairbanks(phi,lam)
#genLCC = lcc.generic_LCC(phi, phiO, phi1, phi2, lam, lamO, FN, FE, kO, a, inFl)

# print out the answers (can do so in usft if desired)
#print ("SPZ3  ", "E:", "%.3f" % (AKZ3[0] * usft), "N:", "%.3f" % (AKZ3[1] * usft), "k:", AKZ3[2], "EF:", EF, "CSF:", "%.12f" % (AKZ3[2] * EF), "   d(ppm) =", "%.2f" % ((AKZ3[2] * EF -1) * 1000000))
#print ("Frbnks", "E:", "%.3f" % (FbkLDP[0] * usft), "N:", "%.3f" % (FbkLDP[1] * usft), "k:", FbkLDP[2], "EF:", EF, "CSF:", "%.12f" % (FbkLDP[2] * EF), "   d(ppm) =", "%.2f" % ((FbkLDP[2] * EF -1) * 1000000))
#print ("genLCC", "E:", "%.3f" % (genLCC[0] * usft), "N:", "%.3f" % (genLCC[1] * usft), "k:", genLCC[2], "EF:", EF, "CSF:", "%.12f" % (genLCC[2] * EF), "   d(ppm) =", "%.2f" % ((genLCC[2] * EF -1) * 1000000))
#print ("genLCC", "E:", "%.3f" % genLCC[0], "N:", "%.3f" % genLCC[1], "k:","%.7f" % genLCC[2], "EF:", "%.7f" %EF, "CSF:", "%.7f" % (genLCC[2] * EF), "   d(ppm) =", "%.2f" % ((genLCC[2] * EF -1) * 1000000))
#print ("RichZ1", "E:", "%.3f" % (RichZ1[0] * usft), "N:", "%.3f" % (RichZ1[1] * usft), "k:", RichZ1[2], "EF:", EF, "CSF:", "%.12f" % (RichZ1[2] * EF), "   d(ppm) =", "%.2f" % ((RichZ1[2] * EF -1) * 1000000))

# test points, in decimal degrees, Lat, long, then Ellipsoid Height in meters.
points = np.genfromtxt("Anch Bowl points2.csv", delimiter=',')

distortion_results = np.zeros([points.shape[0] + 2]) # last two slots are stdDev and Average
######### write out results of exact LDP already designed ##################
outfile = open("Anch Bowl points2_computed.csv", "w")
print("Lat" ",", "Long", ",", "Ellipsoid", ",", "E", ",", "N", ",", "k", "EF", "DISTORTION(ppm)", file = outfile)
for i in range(points.shape[0]) :
    Rg = ldp.geMeRaCu(points[i][2])
    EF = Rg/(Rg + points[i][2])
    bowl = ldp.AnchBowl(points[i][0],points[i][1])  # needs a (phi and lam)
    d = (EF * bowl[2] - 1) * 1000000  # d = linear distortion in units of ppm
    print(points[i][0], ",", points[i][1], ",", points[i][2], ",", bowl[0], ",", bowl[1], ",", bowl[2], ",", EF, ",", d, file = outfile)
outfile.close()
##########################################################################